@using KianoorBlazorApp.Shared.Chat

@page "/Chat"
@inject NavigationManager navigationManager

<div class="top-row px-4 rounded">
    @if (chatting)
    {
        <p>You are connected as <b>@username</b></p>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    }
</div>

<div class="content bg-info p-4 rounded">

    @*<h1>Blazor SignalR Chat Sample</h1>*@

    @if (!chatting)
    {
        <h2 class="text-light text-capitalize">Chat</h2>

        <p class="text-light">
            Enter your Nick Name to start chatting:
        </p>

        <div class="row">
            <div class="col col-md-4">
                <input type="text" class="form-control" maxlength="32" @bind="@username" />
            </div>
            <div class="col col-md-2">
                <button type="button" class="btn btn-success" @onclick="@ChatRoom"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
            </div>
        </div>


        @if (message != null)
        {
            <div class="alert alert-warning text-danger">
                <div class="invalid-feedback">@message</div>
                <small id="emailHelp" class="form-text text-muted">@message</small>
            </div>
        }
    }
    else
    {
        <div id="scrollbox" class="bg-light p-4">

            @foreach (var item in messages)
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
            <hr />

            <div class="row">
                <div class="col col-10">
                    <textarea class="form-control" placeholder="enter your comment" @bind="@newMessage" rows="4"></textarea>
                </div>
                <div class="col col-2">
                    <button class="btn btn-primary btn-block p-5" @onclick="@SendAsync">Send</button>
                </div>
            </div>

            @*<div class="form-group d-inline-flex">
                    <textarea class="form-control" placeholder="enter your comment" @bind="@newMessage" rows="3"></textarea>
                    <button class="btn btn-primary" @onclick="@SendAsync">Send</button>
                </div>*@
        </div>
    }
</div>

@code  {

    #region Variables

    // flag to indicate chat status
    bool chatting = false;

    // name of the user who will be chatting
    string username = null;

    ChatClient client = null;

    // on-screen message
    string message = null;

    // new message input
    string newMessage = null;

    // list of messages in chat
    List<Message> messages = new List<Message>();

    #endregion

    #region Chat Funtions
    /// <summary>
    /// Start chat client
    /// </summary>
    async Task ChatRoom()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(username))
        {
            message = "Please enter a nick name!";
            return;
        };

        try
        {
            // remove old messages if any
            messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;
            client = new ChatClient(username, baseUrl);
            // add an event handler for incoming messages
            client.MessageReceived += MessageReceived;
            // start the client
            Console.WriteLine("Index: chart starting...");
            await client.StartAsync();
            Console.WriteLine("Index: chart started?");

            chatting = true;
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    /// <summary>
    /// Inbound message
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");
        bool isMine = false;
        if (!string.IsNullOrWhiteSpace(e.Username))
        {
            isMine = string.Equals(e.Username, username, StringComparison.CurrentCultureIgnoreCase);
        }

        var newMsg = new Message(e.Username, e.Message, isMine);
        messages.Add(newMsg);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    async Task DisconnectAsync()
    {
        if (chatting)
        {
            await client.StopAsync();
            client = null;
            message = "chat ended.";
            chatting = false;
        }
    }

    async Task SendAsync()
    {
        if (chatting && !string.IsNullOrWhiteSpace(newMessage))
        {
            // send message to hub
            await client.SendAsync(newMessage);
            // clear input box
            newMessage = "";
        }
    }

    #endregion

    #region Class Models

    class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        /// <summary>
        /// Determine CSS classes to use for message div
        /// </summary>
        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }

    #endregion

}